Leetcode 645
The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number.
Given an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.

Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]
Note:
The given array size will in the range [2, 10000].
The given array's numbers won't have any order.

// solution 1 count all numbers: iterate all elements and count the appeared number of each one. The second iteration check the repeat number and missed number.
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        std::vector<int> numMap(nums.size(), 0);
        int repeatNum = -1;
        int errorNum = -1;
        
        for(int i = 0 ; i < nums.size() ; ++i) 
            numMap[nums[i]-1]++; // count the appeared number
        
        for(int i = 0 ; i < nums.size() ; ++i) {
            if (numMap[i] == 2) { // repeat number
                repeatNum = i+1;
            } else if (numMap[i] == 0) { // missed number
                errorNum = i+1;
            }
        }
        std::vector<int> result = {repeatNum, errorNum};
        return result;
    }
};

// solution 2 index2value mapping: the first iteration, mark the value n[n[i]] to negative with n[i] as index, if one is already negative, that means it has been marked before, and it's the repeat number. Next iteration, the positive one's index, it's the missed number.
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        std::vector<int> result(2,0);
        
        for (int i = 0 ; i < nums.size() ; ++i) {
            if (nums[abs(nums[i])-1] > 0 ) { // vector start from index 0, the real value is 1 to n, so substract 1 to make aligned
                nums[abs(nums[i])-1] *= -1; // mark the visited element as negative
            } else {
                result[0] = abs(nums[i]); // the catched value may mark as negative before, so do abs to it before recording
            }
        }
        
        for (int i = 0 ; i < nums.size() ; ++i) {
            if (nums[i] > 0) {
                result[1] = i+1; // the real value is 1 more than index
            }
        }
        return result;
    }
};

//solution 3 sort and check(the most stupid one): first sort all numbers, iterate from beginning and check if value is equal to value; find the repeat and missed number respectively based on if conditions.
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        std::sort(nums.begin(), nums.end());
        std::vector<int> result(2,0);
        bool findRep = false;
        int mid = 0;
        for (int i = 0 ; i < nums.size() ; ++i) {
            if (nums[i] > i+1) { // i+i is missed one, next find the repeat one
                result[1] = i+1;
                mid = i;
                break;
            } else if(nums[i] < i+1) { // nums[i] is repeat one, next find the missed one
                result[0] = nums[i];
                findRep = true;
                mid = i;
                break;
            }
        }
        if (findRep) {
            for (int i = mid ; i < nums.size() ; ++i) { // find missed one
                if (nums[i] == i + 1) { // find the next value == index number, the front one is missed number
                    result[1] = i;
                    break;
                }
            }
            if (result[1] == 0) result[1] = nums.size(); // in case the last number is missed
        } else {
            for (int i = mid ; i < nums.size() ; ++i) { // find repeat one
                if (i > 0 && nums[i] == nums[i-1]) { // two consecutive identical number can determine the repeat one
                    result[0] = nums[i];
                    break;
                }
            }
        }
        return result;
    }
};

//solution 4 count all number (hash set), i don't know why it's so slow runtime. Maybe find consume too much.
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        std::set<int> numSet; 
        std::set<int>::iterator it;
        std::vector<int> result(2,0);

        for (int i = 0 ; i < nums.size() ; ++i ) {
            it = numSet.find(nums[i]);
            if (it != numSet.end()) {
                result[0] = nums[i];
            } else {
                numSet.insert(nums[i]);
            }
        }
        
        for (int i = 0 ; i < nums.size() ; ++i ) {
            it = numSet.find(i+1);
            if(it == numSet.end()) {
                result[1] = i+1;
                break;
            }
        }
        
        return result;
    }
};
